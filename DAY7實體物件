# Point 實體物件的設計: 平面座標上的點
class Point:
    def __init__(self, x, y):
        self.x=x
        self.y=y
# 建立第一個實體物件
p1=Point(3,4) # 透過實體函數產生一個實體物件 Point 放進變數 p1 裡
print(p1.x,p1.y) #操作實體物件的屬性
# 建立第二個實體物件
p2=Point(5,6)
print(p2.x,p2.y)

# FullName 實體物件的設計: 分開紀錄姓.名資料的全名
class FullName:
    def __init__(self):
        self.first="L.Z."
        self.last="Lin"
name1=FullName()
print(name1.first, name1.last)
# 將self彈性化
class FullName1:
    def __init__(self,first,last):
        self.first=first
        self.last=last
name1=FullName1("L.Z.","Lin")
print(name1.first, name1.last)
name2=FullName1("T.E.","Peng")
print(name2.first, name2.last)

# 加入實體方法使用
# Point 實體物件的設計: 平面座標上的點
class Point:
    def __init__(self,x,y):
        self.x=x
        self.y=y
    # 定義實體方法(可以定義數個實體方法)
    def show(self):
        print(self.x, self.y)
    def distance(self, terX, terY):
        return (((self.x-terX)**2)+((self.y-terY)**2))**0.5
p1=Point(3,4)
p1.show() # 呼叫實體方法 / 函式
result=p1.distance(0,0) # 計算座標(3.4) 和 座標(0.0) 之間的距離
print(result)

# File 實體物件的設計: 包裝檔案讀取的程式
class File:
    def __init__(self, name, file):
        self.name=name
        self.file=None # 尚未開啟檔案: 初期是None
    def open(self):
        self.file=open(self.name, "r", encoding="utf-8")
    def read(self):
        return self.file.read()
f1=File("data2.txt","None") # 讀取第一個檔案
f1.open()
data=f1.read()
print(data)
f2=File("data3.txt","None") # 讀取第二個檔案
f2.open()
data=f2.read()
print(data)

# File 實體物件的設計: 包裝檔案讀取的程式並修改其中的資料
class File:
    def __init__(self, name, file):
        self.name=name
        self.file=None # 尚未開啟檔案: 初期是None
    def open(self):
        with open(self.name, "r", encoding="utf-8") as self.file:
            return self.file.read()
    def write(self):
        with open(self.name, "w", encoding="utf-8") as self.file:
            self.file.write("我是立哲\n哈哈哈")
f1=File("data2.txt","None") # 讀取第一個檔案
f1.write()
data=f1.open()
print(data)

--------------------------------------------------------------------------------------------------
# 定義類別與類別屬性(封裝在類別中的變數和含式)
class IO: # 定義一個類別 IO , 有兩個屬性 supportedSrcs 和 read
    supportedSrcs=["console", "file"]
    def read(src):
        if src not in IO.supportedSrcs:
            print("Not supported")
        else:
            print("Read from", src)
# 使用類別
print(IO.supportedSrcs)
IO.read("file")
IO.read("internet")
